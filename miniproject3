#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Dec 23 11:01:08 2017

@author: jamesdawson
"""

import numpy as np
import matplotlib.pyplot as plt
from lmfit import Model

def chi_squared(y,y_template,err):        
        chi = np.sum( (((y-y_template)/err)**2) )
        return chi

data = np.loadtxt('velocity_data',delimiter=' ')

x = data[:,0]
y = data[:,1]
y_up = data[:,2]
y_down = data[:,3]
errs = (y_up + y_down)/2.

def velocity(x,A,B,C):
        V = A + (B * np.sin(2*np.pi*x)) + (C*np.cos(2*np.pi*x))
        return V

gmodel = Model(velocity)
a,b,c = 51,527,-6
result = gmodel.fit(y, x=x, A=a,B=b,C=c,weights=errs)

print(result.fit_report())

plt.errorbar(x,y,yerr=[y_up,y_down],color='k',fmt='o', markersize=2, capsize=2)
plt.plot(x, result.best_fit, 'r--')

off = 18.4905765
off_err = 4.961134 
kx = 528.952789
kx_err = 5.863505
ky = 4.25368356
ky_err = 8.955140

K = np.sqrt((kx**2)+(ky**2))
K_err = np.sqrt(((kx+kx_err)**2)+((ky+ky_err)**2)) - K

print('Radial velocity semi amplitude: %.2f'% K , ' +/- %.2f' % K_err,'km/s')

Period = 0.3440915*24.*60.*60.
 
def f_Mx(P,K):
        G = 6.67e-11
        return (P*((K*1000)**3))/(2*np.pi*G)

M_sun = 1.98e30

f_mx = f_Mx(Period,K)/M_sun
f_mx_err = (f_Mx(Period,K+K_err)-f_Mx(Period,K)) / M_sun

print('f(Mx) = %.2f' %f_mx, ' +/- %.2f' % f_mx_err)

M_k5 = 0.625
M_k5_err = 0.8-M_k5

###     Assuming the compact object is massive compared to the companion ######

def Mass_x(f,mass_temp,angle):
        mass_a = f/(np.sin(angle)**3)
        mass = mass_a**(1./3.)
        return mass_a,mass

a = 90./90.
Mx_a,Mx = Mass_x(f_mx,M_k5,a)
Mx_err_a, Mx_err = Mass_x(f_mx+f_mx_err,M_k5+M_k5_err,a) - Mx      

print('Mx at i= %.2f'%(a*90.),' degrees = %.2f'% Mx,' +/- %.2f' % Mx_err, 'M_solar')

a = np.linspace(0.1,1.,1000)
m = np.zeros(len(a))

for i in range(len(a)):
        mx_a,mx= Mass_x(f_mx,M_k5,a[i])
        m[i] = mx
plt.figure()

plt.plot(a*90.,m,'k')

plt.xlabel('Angle/ $^o$')
plt.ylabel('Compact Object Mass/ M_solar')

